[
  {
    "title": "Початок роботи",
    "description": "З самого початку React був спроектований так, щоб його можна було впроваджувати поступово. Тобто ви можете додавати так мало або так багато React-у, як вам потрібно. Скористайтеся інформацією та посиланнями цього розділу, якщо просто бажаєте відчути React на смак або додаєте трохи “інтерактивності” до простої HTML-сторінки, чи, навіть, якщо стартуєте складний React-проект",
    "href": "https://uk.reactjs.org/docs/getting-started.html"
  },
  {
    "title": "Перенаправлення рефів",
    "description": "Перенаправлення рефів — це техніка для автоматичної передачі рефа від компонента до одного із його дітей. Для більшості компонентів, зазвичай, вона не є необхідною. Тим не менше, може бути корисною в деяких випадках, особливо якщо ви пишете бібліотеку. Давайте розглянемо найбільш поширені сценарії.",
    "href": "https://uk.reactjs.org/docs/forwarding-refs.html"
  },
  {
    "title": "Фрагменти",
    "description": "Повернення кількох елементів з компонента є поширеною практикою в React. Фрагменти дозволяють формувати список дочірніх елементів, не створюючи зайвих вузлів в DOM.",
    "href": "https://uk.reactjs.org/docs/fragments.html"
  },
  {
    "title": "Форми",
    "description": "В HTML елементи форми, такі як <input>, <textarea> і <select>, зазвичай самі керують своїм станом і оновлюють його коли користувач вводить дані. У React змінний стан зазвичай міститься у властивості стану компонентів і оновлюється тільки через виклик setState(). Ми можемо скомбінувати обидва підходи і зробити стан React-компоненту “єдиним джерелом правди”. Тоді React-компонент, який буде рендерити форму, також буде контролювати її поведінку у відповідь на введення даних користувача. Значення елемента форми в цьому випадку буде контролювати React, а сам елемент буде називатися “керованим компонентом”.",
    "href": "https://uk.legacy.reactjs.org/docs/forms.html"
  }
]
